# Redux Saga
snippet sg "Saga" b
import { call, put, takeLatest } from 'redux-saga/effects';

import {
  ${1:getData}Loading,
  $1Success,
  $1Fail,
	${2:GET_DATA},
} from '$3';
import {
  $1 as $1API,
} from '$4';

export function* $1 (action) {
  try {
    yield put($1Loading());
    const result = yield call($1API, action.payload);
    yield put($1Success(result));
  }  catch (e) {
    yield put($1Fail(e));
  }
}

export function *watch${1/\w+/\u$0/} () {
  yield takeLatest($2, $1);
}
endsnippet

snippet sgac "Saga Actions" b
export const ${1:SET_DATA} = \`${2:reducer}/$1\`;
export const $1_LOADING = \`$2/$1_LOADING\`;
export const $1_SUCCESS = \`$2/$1_SUCCESS\`;
export const $1_FAILED = \`$2/$1_FAILED\`;

export const ${3:setData} = () => ({ type: $1 });
export const $3Loading = () => ({ type: $1_LOADING });
export const $3Success = (data) => ({ type: $1_SUCCESS, payload: data });
export const $3Fail = (error) => ({ type: $1_FAIL, payload: error });
endsnippet

# Redux
snippet rdac "Redux Action" b
export const ${1:SET_DATA} = \`${2:reducer}/$1\`;
export const ${3:setData} = () => ({ type: $1 });
endsnippet

snippet rdrdc "Redux Reducer" b
import {
  ${4:SET_DATA},
} from '$5';

const initState = {
  ${1:state}: ${2:null},
};

const reducer = (state = initState, action) => {
  switch (action.type) {
    case $4:
      return {
        $1: ${3:action.payload,}
      };
    default:
      return state;
  }
};

export default reducer;
endsnippet

snippet rdct "Redux Container" b
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';

import ${1:Component} from '$2$1';
import {
  ${4:action}
} from '$5';

const mapStateToProps = (state) => ({
  ${3:data}: state.$3,
});

const mapDispatchToProps = (dispatch) => bindActionCreators({
  $4,
}, dispatch);

export default connect(mapStateToProps, mapDispatchToProps)($1);
endsnippet

# React
snippet rapc "React Pure Component" b
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import styles from './${2:$1}.css';

class ${1:ComponentName} extends PureComponent {
  static propTypes = {
    ${3:children}: PropTypes.${4:any},
  }
  static defaultProps = {
    $3: ${5:null},
  }
  constructor(props) {
    super(props);
  }
  render() {
    const {
      $3,
    } = this.props;

    return (
      <div className={styles['default']}>
        $6
      </div>
    );
  }
}

export default $1;
endsnippet
