# Redux
snippet ax "Action" b
export const ${1:SET_DATA} = '${2:reducer}/$1';
export const ${1/(.*?)_([a-zA-Z])([A-Z]*)/\L$1\E\u$2\L$3\E/g}  = () => ({ type: $1 });
endsnippet

snippet prcp "React Pure Component" b
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';

import styles from './styles.css';

class ${1:Component} extends PureComponent {
  static propTypes = {
  }
  static defaultProps = {
  }
  render() {
    return (
      <div className={styles['default']}>
        $2
      </div>
    );
  }
}

export default $1;
endsnippet

snippet ct "Container" b
import { connect } from 'react-redux';
import { compose } from 'redux';

import ${1:Component} from '$2$1';

const mapStateToProps = (state) => state;
const mapDispatchToProps = (dispatch) => ({ dispatch });
const mergeProps = (state, { dispatch }, ownProps) => {
  return {
    $3
  };
};

export default compose(
  connect(
    mapStateToProps,
    mapDispatchToProps,
    mergeProps,
  )
)($1);
endsnippet

# Redux Saga
snippet sg "Saga" b
  ${1:getData}Loading,
  $1Success,
  $1Fail,
  ${1/([a-z]*?)([A-Z])([a-z]*)/\U$1_\E\u$2\U$3\E/g},

  $1 as $1API,

export function* $1 (action) {
  try {
    yield put($1Loading());
    const result = yield call($1API, action.payload);
    yield put($1Success(result));
  }  catch (e) {
    yield put($1Fail(e));
  }
}

export function *watch${1/\w+/\u$0/} () {
  yield takeLatest(${1/([a-z]*?)([A-Z])([a-z]*)/\U$1_\E\u$2\U$3\E/g}, $1);
}
endsnippet

snippet sgax "Saga Actions" b
export const ${1:SET_DATA}         = '${2:reducer}/$1';
export const $1_LOADING = '$2/$1_LOADING';
export const $1_SUCCESS = '$2/$1_SUCCESS';
export const $1_FAILED  = '$2/$1_FAILED';

export const ${1/(.*?)_([a-zA-Z])([A-Z]*)/\L$1\E\u$2\L$3\E/g}        = ()      => ({ type: $1 });
export const ${1/(.*?)_([a-zA-Z])([A-Z]*)/\L$1\E\u$2\L$3\E/g}Loading = ()      => ({ type: $1_LOADING });
export const ${1/(.*?)_([a-zA-Z])([A-Z]*)/\L$1\E\u$2\L$3\E/g}Success = (data)  => ({ type: $1_SUCCESS, payload: data });
export const ${1/(.*?)_([a-zA-Z])([A-Z]*)/\L$1\E\u$2\L$3\E/g}Failed  = (error) => ({ type: $1_FAILED, payload: error });
endsnippet
